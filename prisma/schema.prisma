// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique(map: "email") @db.VarChar(255)
  name          String   @db.VarChar(100)
  gender        String   @db.VarChar(15)
  birth         DateTime @db.Date
  address       String   @db.VarChar(255)
  detailAddress String?  @map("detail_address") @db.VarChar(255)
  phoneNumber   String   @map("phone_number") @db.VarChar(15)

  userFavorCategories UserFavorCategory[]
  UserStoreReview     UserStoreReview[]
  UserMission         UserMission[]

  @@map("user")
}

model FoodCategory {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  userFavorCategories UserFavorCategory[]
  Store               Store[]

  @@map("food_category")
}

model UserFavorCategory {
  id             Int          @id @default(autoincrement())
  user           User         @relation(fields: [userId], references: [id])
  userId         Int          @map("user_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int          @map("food_category_id")

  @@index([foodCategoryId], map: "f_category_id")
  @@index([userId], map: "user_id")
  @@map("user_favor_category")
}

model Store {
  id               Int               @id @default(autoincrement())
  name             String
  address          String
  regionId         Int?
  categoryId       Int
  score            Int               @default(0)
  category         FoodCategory      @relation(fields: [categoryId], references: [id])
  userStoreReviews UserStoreReview[]
  Region           Region?           @relation(fields: [regionId], references: [id])
  Mission          Mission[]
}

model UserStoreReview {
  id      Int    @id @default(autoincrement())
  storeId Int
  userId  Int
  content String @db.Text
  score   Int    @default(0)

  store Store @relation(fields: [storeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Region {
  id        Int      @id @default(autoincrement())
  name      String
  stores    Store[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mission {
  id          Int      @id @default(autoincrement())
  storeId     Int
  reward      String
  deadline    DateTime
  missionSpec String

  store       Store         @relation(fields: [storeId], references: [id])
  UserMission UserMission[]
}

model UserMission {
  id        Int      @id @default(autoincrement())
  userId    Int
  missionId Int
  status    String   @default("in_progress")
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  mission Mission @relation(fields: [missionId], references: [id])
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.VarChar(512)
  expiresAt DateTime @map("expires_at")

  @@map("session")
}
